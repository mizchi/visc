import { chromium } from '@playwright/test';
import { compareImages } from '../dist/core/compare.js';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

async function testCSSRefactor() {
  const browser = await chromium.launch({ headless: true });
  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 }
  });
  const page = await context.newPage();
  
  try {
    // „Çπ„Éä„ÉÉ„Éó„Ç∑„Éß„ÉÉ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    await fs.mkdir('./snapshots', { recursive: true });
    await fs.mkdir('./css-refactor-diffs', { recursive: true });
    
    // 1. „Ç™„É™„Ç∏„Éä„É´CSS„Åß„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
    console.log('üì∏ Taking screenshot with original CSS...');
    const testPagePath = `file://${path.join(__dirname, 'test-page.html')}`;
    await page.goto(testPagePath);
    
    const originalPath = './snapshots/original.png';
    await page.screenshot({ 
      path: originalPath,
      fullPage: true 
    });
    console.log('‚úÖ Original screenshot saved:', originalPath);
    
    // 2. CSS„ÇíÂ∑Æ„ÅóÊõø„Åà„Å¶„Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà
    console.log('\nüé® Applying refactored CSS...');
    
    // Êó¢Â≠ò„ÅÆ„Çπ„Çø„Ç§„É´„ÇíÂâäÈô§
    await page.evaluate(() => {
      const originalStyle = document.getElementById('original-css');
      if (originalStyle) {
        originalStyle.remove();
      }
    });
    
    // „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Âæå„ÅÆCSS„ÇíÈÅ©Áî®
    const refactoredCSS = await fs.readFile('./refactored-styles.css', 'utf-8');
    await page.addStyleTag({ content: refactoredCSS });
    
    const refactoredPath = './snapshots/refactored.png';
    await page.screenshot({ 
      path: refactoredPath,
      fullPage: true 
    });
    console.log('‚úÖ Refactored screenshot saved:', refactoredPath);
    
    // 3. ÁîªÂÉè„ÇíÊØîËºÉ
    console.log('\nüîç Comparing original vs refactored CSS...');
    const result = await compareImages(originalPath, refactoredPath, {
      threshold: 0.01, // 1%„ÅÆÂ∑ÆÂàÜ„Åæ„ÅßË®±ÂÆπ
      generateDiff: true,
      diffPath: './css-refactor-diffs/css-diff.png'
    });
    
    console.log('\nüìä Comparison Result:');
    console.log(`  Match: ${result.match ? '‚úÖ PASSED' : '‚ùå FAILED'}`);
    console.log(`  Difference: ${(result.difference * 100).toFixed(2)}%`);
    console.log(`  Different pixels: ${result.diffPixels}`);
    
    if (result.diffPath) {
      console.log(`  Diff image: ${result.diffPath}`);
    }
    
    // 4. Ë©≥Á¥∞„Å™Â∑ÆÂàÜÂàÜÊûê
    if (!result.match) {
      console.log('\n‚ö†Ô∏è  Visual differences detected!');
      console.log('  This indicates that the CSS refactoring has introduced visual changes.');
      console.log('  Review the diff image to determine if these changes are acceptable.');
      
      // „Åó„Åç„ÅÑÂÄ§„ÇíË∂Ö„Åà„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
      if (result.difference > 0.01) {
        console.log(`\n‚ùå Difference (${(result.difference * 100).toFixed(2)}%) exceeds threshold (1%)`);
        console.log('  The CSS refactoring has introduced significant visual regressions.');
      }
    } else {
      console.log('\n‚úÖ CSS refactoring is visually identical!');
      console.log('  The refactored CSS produces the same visual output.');
    }
    
    // 5. „É¨„Éù„Éº„ÉàÁîüÊàê
    const report = {
      timestamp: new Date().toISOString(),
      originalCSS: 'test-page.html (inline styles)',
      refactoredCSS: 'refactored-styles.css',
      result: {
        match: result.match,
        difference: result.difference,
        diffPixels: result.diffPixels,
        threshold: 0.01
      },
      passed: result.difference <= 0.01
    };
    
    await fs.writeFile(
      './css-refactor-report.json',
      JSON.stringify(report, null, 2)
    );
    console.log('\nüìÑ Report saved: ./css-refactor-report.json');
    
  } finally {
    await browser.close();
  }
}

// ÂÆüË°å
console.log('üöÄ CSS Refactoring Visual Test\n');
testCSSRefactor().catch(console.error);